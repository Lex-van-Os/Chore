@page "/task"
@page "/task/{id:int}"
@inject ITaskService TaskService

@if(Id == null)
{
    <PageTitle>New task</PageTitle>
    <h3>Create a new task</h3>
}
else
{
    <PageTitle>Edit task @task.Name</PageTitle>
    <h3>Edit task @task.Name</h3>
}
<EditForm Model="task" OnSubmit="HandleSubmit">
    <div>
        <label for="name"></label>
        <InputText id="name" @bind-Value="task.Name" class="form-control"></InputText>
    </div>
    <div>
        <label for="description"></label>
        <InputText id="description" @bind-Value="task.Description" class="form-control"></InputText>
    </div>
@*    <div>
        <label for="dueDate"></label>
        <InputText id="dueDate" @bind-Value="task.DueDate" class="form-control"></InputText>
    </div>*@
    <div>
        <label for="done"></label>
        <InputCheckbox id="done" @bind-Value="task.Done" class="form-control"></InputCheckbox>
    </div>
    <button type="submit" class="btn-primary">@btnText</button>
    <button type="button" class="btn-danger" @onclick="DeleteTask">Delete Task</button>
</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; }

    string btnText = string.Empty;

    ChoreApp.Shared.Task task = new ChoreApp.Shared.Task { };

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        btnText = Id == null ? "Create task" : "Update task";
        await TaskService.GetTasks();
    } 

    protected override async System.Threading.Tasks.Task OnParametersSetAsync()
    {
        if (Id == null)
        {
            // Create task
        } 
        else
        {
            task = await TaskService.GetTask((int)Id);
        }
    }

    async System.Threading.Tasks.Task HandleSubmit()
    {
        if (Id == null)
        {
            await TaskService.CreateTask(task);
        }
        else
        {
            await TaskService.UpdateTask(task);
        }
    }

    async System.Threading.Tasks.Task DeleteTask()
    {
        await TaskService.DeleteTask(task.Id);
    }
}
